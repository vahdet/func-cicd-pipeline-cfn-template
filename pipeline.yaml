Description:
  This template deploys CI/CD Pipelines for the application

Parameters:
  Project:
    Type: String
  Environment:
    Type: String
  Repository:
    Type: String
  Branch:
    Type: String
  LambdaArtifactStoreBucket:
    Type: String
  CodeBuildRoleArn:
    Type: String
  CodePipelineRoleArn:
    Type: String
  CloudFormationLambdaManagerRoleArn:
    Type: String
  FunctionName:
    Type: String
  GitHubOwner:
    Type: String
  FunctionGithubOauthTokenSecret:
    Type: String
  BackendServiceBaseURL:
    Type: String
  BackendServiceApiKeySecretArn:
    Type: String

Resources:
  # CodeBuild
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${FunctionName}-build-proj
      Description: Used to build function from the GitHub Repo
      ServiceRole: !Ref CodeBuildRoleArn
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/python:3.7.1"
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: LAMBDA_ARTIFACT_STORE_BUCKET
            Value: !Ref LambdaArtifactStoreBucket
      

  # CodePipeline
  PipelineProject:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${FunctionName}-pl-proj
      RoleArn: !Ref CodePipelineRoleArn
      ArtifactStore:
        Type: S3
        Location: !Ref LambdaArtifactStoreBucket
      RestartExecutionOnUpdate: true
      Stages:
        # Source
        - Name: Source
          Actions:
            - Name: FetchSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              OutputArtifacts:
                - Name: LFSource
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref Repository
                Branch: !Ref Branch
                OAuthToken: !Sub "{{resolve:secretsmanager:${FunctionGithubOauthTokenSecret}:SecretString:token}}"
                PollForSourceChanges: false
              RunOrder: 1
        # Build
        - Name: Build
          Actions:
            - Name: BuildFunction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: LFSource
              OutputArtifacts:
                - Name: LFBuild
              RunOrder: 1
        # Deploy
        - Name: Pipeline
          Actions:
            - Name: DeployPipeline
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                StackName: !Sub ${FunctionName}-deploy-stack
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: "LFBuild::output-template.yaml"
                RoleArn: !Ref CloudFormationLambdaManagerRoleArn
                ParameterOverrides: !Sub '
                  {
                    "FunctionName": "${FunctionName}",
                    "BackendServiceBaseURL": "${BackendServiceBaseURL}",
                    "BackendServiceApiKeySecretArn": "${BackendServiceApiKeySecretArn}",
                    "Environment": "${Environment}",
                    "Application": "${Project}"
                  }'
              InputArtifacts:
                - Name: LFBuild
              RunOrder: 1
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Project

  RepoWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub "{{resolve:secretsmanager:${FunctionGithubOauthTokenSecret}:SecretString:token}}"
      RegisterWithThirdParty: "true"
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref PipelineProject
      TargetAction: FetchSource
      TargetPipelineVersion: !GetAtt PipelineProject.Version
